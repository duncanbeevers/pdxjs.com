!!! XML
!!! 1.1
%html{ :xmlns => "http://www.w3.org/1999/xhtml", "xml:lang".to_sym => "en" }
  %head
    %meta{ "http-equiv" => "content-type", :content => "text/html; charset=utf-8" }
    %title Portland JavaScript Admirers
    %link{ :rel => "stylesheet", :href => "/css/screen.css", :type => "text/css", :media => "screen, projection" }
    %meta{ 'http-equiv' => "X-XRDS-Location", :content => "http://www.myopenid.com/xrds?username=hallettj.myopenid.com" }
    %link{ :rel => "openid.server",      :href => "http://www.myopenid.com/server" }
    %link{ :rel => "openid.delegate me", :href => "http://hallettj.myopenid.com/"  }
    %link{ :rel => "openid2.local_id",   :href => "http://hallettj.myopenid.com/"  }
    %link{ :rel => "openid2.provider",   :href => "http://www.myopenid.com/server" }
    %link{ :rel => "alternate", :type => "application/x-wiki", :title => "Edit this page on Github", :href => "http://github.com/hallettj/pdxjs.com" }
  %body
    .title
      %h1 Portland JavaScript Admirers

    .section
      %p 
        We meet monthly to discuss topics on JavaScript and ECMAscript ranging
        from client-side web frameworks, to functional and prototypal programming
        theory. Meetings take place on the last Wednesday of every month from 7-9pm at
        = succeed '.' do
          %a{ :href => "http://calagator.org/venues/202389907" } CubeSpace

      %p
        New members and speakers are always welcome! Please send a message to 
        %a{ :href => "mailto:pdxjs@googlegroups.com" } pdxjs@googlegroups.com
        if you would like to give a presentation, or if you have a suggestion
        for a topic.  And feel free to join our mailing list at 
        %a{ :href => "http://groups.google.com/group/pdxjs" } http://groups.google.com/group/pdxjs
        if you too are a JavaScript admirer.

    .section
      %h2 Calendar
      %a{ :rel => "calendar", :type => "application/json", :href => "http://calagator.org/events/search.json?tag=pdxjs" }
      %p
        Follow the Portland JavaScript Admirers on
        = succeed ',' do
          %a{ :href => "http://calagator.org/events/search?tag=pdxjs" } Calagator
        = succeed ',' do
          %a{ :href => "http://www.google.com/calendar/render?cid=http%3A%2F%2Fcalagator.org%2Fevents%2Fsearch.ics%3Ftag%3Dpdxjs" } subscribe via Google Calendar
        = succeed ', or' do
          %a{ :href => "http://add.my.yahoo.com/content?.intl=us&url=http%3A%2F%2Fcalagator.org%2Fevents%2Fsearch.ics%3Ftag%3Dpdxjs" } subscribe via My Yahoo!
        = succeed '.' do
          %a{ :href => "webcal://calagator.org/events/search.ics?tag=pdxjs" } subscribe to the ical feed

    .section
      %h2 Reporting from the Closures

      %h3.title PDX.js March Meeting Recap
      %p
        We started of the March meeting of the Portland JavaScript Admirers
        with a demonstration of 
        = succeed '.' do
          %a{ :href => 'http://reversehttp.net/' } ReverseHttp
        This is a protocol that allows any HTTP client to act as an HTTP server
        by receiving requests on a public-facing subdomain. So it allows for 
        = succeed '.' do
          %a{ :href => 'http://www.reversehttp.net/demos/demo.html' } a web server written in JavaScript to run in a normal web page

      %p
        A useful application of a web server in a page is that provides a
        flexible way to push data into a client side application. The client
        does not have to be specially set up for polling; and the program
        pushing the data does not have to be specially configured to support
        = succeed '.' do
          %a{ :href => 'http://en.wikipedia.org/wiki/Long_polling#Long_polling' } long-polling connections

      %p
        ReverseHttp works through a gateway server. The client code, referred
        to in a ReverseHttp documentation as the 'application', requests some
        URL space from the server. The URL space can be a path with a unique
        root, so that multiple applications can register URL space on the same
        host, or the URL space can be a unique subdomain.
        
      %p
        The application next makes a long-polling request to the gateway server
        on a private URL. The server listens on the applications registered URL
        space and proxies an requests that come in to the application by
        embedding the request within the response to the application's
        long-polling request. The application composes a response which it
        sends back to the gateway server embedded in another HTTP request. The
        gateway server finally extracts the application's response and forwards
        it on to the original requestor.

      %p
        So long-polling is used internally by ReverseHttp. But ReverseHttp has
        advantages over other solutions that do not require a third-party
        gateway. It can be used in many different applications to send or
        receive different kinds of data without any modification to the gateway
        server. And the data source does not have to be specially outfitted to
        support long-pulling connections. So you can catch data from a source
        that was not originally designed to push data to a client-side
        application.

      %p
        I set up two demos to show off what ReverseHttp can do. One displays
        commit notifications from a Github repository in real time. The other
        is a chat application - a sort of a really stripped down
        reimplementation of Jabber. The demos are available at
        = succeed '.' do
          %a{ :href => 'http://pdxjs.com:8000/' } http://pdxjs.com:8000/

      %p
        Next we heard about Windows Script Host from Rainier Anacker. This is a
        feature of Windows that allows users to write scripts to automate
        functions of the operating system. By default scripts can be written in
        JScript or VBScript - but there are addons that allow scripts to be
        written in other languages.

      %p
        When using JScript, operating system features are accessed through
        calls to the WScript.shell object. The API allows scripts to manipulate
        running programs, and to send keypresses and control sequences. For
        example, a script can open Notepad and enter "Hello world" into a new
        text file.

      %p
        Rainier demonstrated how Script Host can be used to grab all of the
        links from a web page and to display them with indexes in a new
        document. He mentioned that he has also used Script Host to manipulate
        Excel documents, thus saving a lot of manual work. It was brought up
        that Script Host is a good tool for automated testing when developing
        applications on Windows.

      %p
        For a good reference on how to use Script Host, see Windows 2000
        Scripting Bible.

      %p
        After that we talked a little about ways to get around 
        = succeed '.' do
          %a{ :href => 'http://en.wikipedia.org/wiki/Same_origin_policy' } JavaScript's same-origin policy for HTTP requests
        If you have control over the
        browsers that will be hosting your application, you can set up a direct
        socket to a server and expose an interface to that connection to the
        JavaScript interpreter. Otherwise your options are more limited. You
        can use workarounds like
        %a{ :href => 'http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/' } JSONP
        and
        %a{ :href => 'http://nb.io/hacks/csshttprequest' } HttpCssRequest
        \- but those only
        allow GET requests and require server-side cooperation. You can use 
        %a{ :href => 'http://developer.yahoo.com/javascript/howto-proxy.html' } a server-side proxy
        to direct requests through. But you have to set up
        that proxy on your own domain.

      %p
        Hopefully though the troubles caused by the same origin policy are
        temporary. Firefox 3.1 - soon to be renumbered Firefox 3.5 - includes
        = succeed '.' do
          %a{ :href => 'https://developer.mozilla.org/En/HTTP_access_control' } cross-domain XMLHttpRequest support
        And Internet Explorer 8 also allows cross-domain requests via
        = succeed '.' do
          %a{ :href => 'http://msdn.microsoft.com/en-us/library/cc288060%28VS.85%29.aspx' } a new API object called XDomainRequest
        The new features in both browsers require servers to include an
        'Access-Control-Allow-Origin' HTTP header in certain responses to
        indicate that they accept cross-domain connections - as described in
        = succeed '.' do
          %a{ :href => 'http://dev.w3.org/2006/waf/access-control/' } this W3C working draft
        Hopefully similar features will appear in other browsers in the near
        future.

      %p
        Finally we spent some time talking about neat things that can be done
        with HTML 5 and newer versions of the DOM API. We looked at 
        = succeed ',' do
          %a{ :href => 'http://www.chromeexperiments.com/' } Chrome Experiments
        which is a Google-sponsored repository of JavaScript demos that push
        the limits of what JavaScript can do. We also looked at
        = succeed ',' do
          %a{ :href => 'http://raphaeljs.com/' } RaphaÃ«l
        which Merlyn brought up as a cross-browser-compatible tool for
        rendering vector graphics. And we drooled a little over
        = succeed '.' do
          %a{ :href => 'http://helephant.com/2008/07/the-bleeding-edge-of-web-queryselector-and-queryselectorall/' }
            querySelector and querySelectorAll
        These are new methods that are being added to the DOM API. They add
        jQuery-like selectors to the native API. For example,

      %code
        %pre
          document.querySelectorAll("#large:nth-child(even)");

      %p
        querySelector and querySelectorAll are already included in Safari 4,
        Firefox 3.1/3.5, IE8, and Opera's Acid 3 build.

      %p
        All in all it was a fun meeting. I am already looking forward to the
        next one!

      %a{ :href => "http://controlroom.blogspot.com/2009/02/wanderer-cubespace.html" }
        %h3.title A Wanderer @ CubeSpace
      %p
        Portland JavaScript Admirers have convened for a second time. There's a mailing list, a web site, plus you can follow on Calagator. We meet at CubeSpace, Portland's geek HQS (for software -- not competing with Free Geek). Ad: Women's Networking Group meets in Roman on second Tuesdays.
        %a{ :href => "http://controlroom.blogspot.com/2009/02/wanderer-cubespace.html" }
          read more

      %h3.title PDX.js January Meeting Recap
      %p
        The inaugural meeting of the Portland JavaScript Admirers was a big
        success. We started off the evening with a round of introductions.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3170513&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3170513&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        After that we listened to several talks on the fine language that is
        JavaScript. I pulled out my copy of JavaScript: The Good Parts by
        Douglas Crockford and went over some of the tips from the book on how
        to write great JavaScript code. I focused on how and why to avoid
        global variables - which can sneak up on your JavaScript code if you
        are not careful. 
        
      %p
        For example, you may know that variable declaration in
        JavaScript is optional. But did you know that variables that are not
        declared become global?

      %p
        Another tricky case is the 'this' keyword, which is used in method
        definitions to access attributes of the object that the method is
        attached to. But 'this' is actually re-assigned every time the method
        is invoked. So if the method is invoked as a function instead of as a
        method, i.e.
      %code
        %pre var f = object.method; f();
      %p
        instead of
      %code
        %pre object.method();
      %p
        then 'this' is assigned to the global object for the execution of 'f'.
        So any attributes set on 'this' then become global variables, and any
        attributes read from 'this' are read from the global namespace instead
        of from 'object'.

      %p
        The code examples that I am pointing at in the video are online at
        = succeed '.' do
          %a{ :href => "http://gist.github.com/64478" } http://gist.github.com/64478

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3139648&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3139648&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        Scott Becker told us all about the features of 
        = succeed ',' do
          %a{ :href => "http://www.sproutcore.com/" } SproutCore
        which is an
        MVC framework for browser-side applications. Among other things,
        SproutCore allows you to set up models for your data, which can act as
        an intermediary to transfer data to and from a server, or that can
        store data locally using something like Google Gears. Changes made in
        the model data automatically update data in your views, and vice versa,
        through the use of Key-Value Coding. Instead of directly accessing
        attribute values, you use object.get(key) and object.set(key, value).
        This allows SproutCore to do all kinds of magical stuff for you.

      %p
        Views in SproutCore are things like forms and form elements, buttons,
        file selectors, and content areas. Instead of using the browser's form
        elements and buttons, SproutCore renders these as images to achieve a
        very slick-looking interface that is consistent across all browsers.

      %p
        Using Key-Value Coding with views, you can do stuff like get input from
        your user via a form, and display a live preview of the content he
        enters that is updated in real time, with very little work on your part.

      %p
        Unfortunately the batteries in our camera died partway through Scott's
        talk. So there are a few minutes missing from the middle.

      %p
        The slides from Scott's talk are online at
        = succeed '.' do
          %a{ :href => "http://www.slideshare.net/joydivider/sproutcore-a-next-gen-javascript-framework" } http://www.slideshare.net/joydivider/sproutcore-a-next-gen-javascript-framework

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3188440&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3188440&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        I went over the new features in 
        = succeed '.' do
          %a{ :href => "http://docs.jquery.com/Release:jQuery_1.3" } jQuery 1.3
        Many speed improvements
        have been made in this release. For example, the selector engine is 49%
        faster. And HTML injection into the document is a blazing 6 times
        faster. The new, faster selector engine has been broken out into its
        own project called 
        = succeed '.' do
          %a{ :href => "http://sizzlejs.com/" } Sizzle
        
      %p
        This release also includes a complete rewrite of the event system. In
        addition to the 'bind' method for binding event handlers, jQuery 1.3
        supports the most excellent 'live' method. Using 'live', your event
        handler will be bound to all elements on the page that match a given
        selector, and any elements that appear in the future that match the
        same selector.

      %p
        jQuery events are now a self-contained system layered on top of native
        events. And the whole thing is compliant with W3C protocols for event
        handling.

      %p
        I also gave an introduction to jQuery in general for those who are not
        familiar with it. And we had a lively group discussion on why people
        might prefer jQuery over alternative libraries, like Prototype.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3197144&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3197144&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        Finally, J. Chris Anderson graciously jumped in to give us an
        introduction to
        = succeed ',' do
          %a{ :href => "http://couchdb.apache.org/" } CouchDB
        a document-oriented database. CouchDB stores all of its data as JSON.
        There is no schema, and there are no tables. Queries are performed
        using the MapReduce pattern and can be written as stored JavaScript
        procedures.

      %p
        Because it is schema-less, CouchDB is not a great choice when you need
        a lot of relational features, like joins. But in cases where you have
        been frustrated by SQL, CouchDB can be a great choice. It excels at
        serving up very large datasets with a high number of concurrent
        queries.

      %p
        J. Chris is a CouchDB developer, and is one of the authors of CouchDB:
        Rough Cuts Version. We will hopefully be seeing another talk from him
        on using CouchDB to create pure-JavaScript applications.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3197436&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3197436&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        At the end of the evening we retired to the Green Dragon for drinks. (Video suppressed.)

      %p
        If you are having any trouble with audio syncing in the flash player, I
        suggest downloading the MP4s directly. Click on the title in any of the
        videos to go to its page on Vimeo. There you can find the file download
        link in the lower-right area.


      %a{ :href => "http://mybizmo.blogspot.com/2009/01/admiring-javascript.html" }
        %h3.title Admiring Javascript
      %p
        I'm at the first Portland JavaScript Admirers, well attended, geeks
        cheering for CubeSpace. We've got lots of independent contractors, including my
        Hewlett-Packard friend from Pythoneers (how I'm logged in, wearing the fleece),
        whom I also invited to our Ruby meetings, first Tuesdays.
        %a{ :href => "http://mybizmo.blogspot.com/2009/01/admiring-javascript.html" }
          read more

    .section
      %h2 Resources

      %p
        Join the mailing list at
        = succeed '.' do
          %a{ :href => "http://groups.google.com/group/pdxjs" } http://groups.google.com/group/pdxjs

      %p 
        Interested in CouchDB? Set up your own database on our public server at
        = succeed '.' do
          %a{ :href => "http://pdxjs.com:5984/_utils" } http://pdxjs.com:5984/_utils
        We only ask that you are respectful of other people's data.

      %p
        Check your code against jslint online at
        %a{ :href => "http://www.jslint.com/" } http://www.jslint.com/
        to catch potential errors early. Or download the jslint plugin for Vim from
        = succeed '.' do
          %a{ :href => "http://github.com/hallettj/jslint.vim/" } http://github.com/hallettj/jslint.vim/

      %p
        Find out about other groups and events in Portland on
        = succeed '.' do
          %a{ :href => "http://calagator.org/" } Calagator

    .footer
      %p
        %span{ "xmlns:dc".to_sym => "http://purl.org/dc/elements/1.1/", :href => "http://purl.org/dc/dcmitype/InteractiveResource", :property => "dc:title", :rel => "dc:type" } pdxjs.com
        by 
        %a{ "xmlns:cc".to_sym => "http://creativecommons.org/ns#", :href => "http://pdxjs.com/", :property => "cc:attributionName", :rel => "cc:attributionURL" } Portland JavaScript Admirers contributers
        is licensed under a
        = succeed '.' do
          %a{ :rel => "license", :href => "http://creativecommons.org/licenses/by-sa/3.0/us/" } Creative Commons Attribution-Share Alike 3.0 United States License

      %p
        The source for this website is hosted on Github at
        = succeed '.' do
          %a{ :href => "http://github.com/hallettj/pdxjs.com/" } http://github.com/hallettj/pdxjs.com/

    %script{ :type => "text/javascript", :src => "http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js" }
    %script{ :type => "text/javascript", :src => "/js/strftime.js" }
    %script{ :type => "text/javascript", :src => "/js/calagator_widget.js" }
