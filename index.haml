!!! XML
!!! 1.1
%html{ :xmlns => "http://www.w3.org/1999/xhtml", "xml:lang".to_sym => "en" }
  %head
    %meta{ "http-equiv" => "content-type", :content => "text/html; charset=utf-8" }
    %title Portland JavaScript Admirers
    %link{ :rel => "stylesheet", :href => "/css/screen.css", :type => "text/css", :media => "screen, projection" }
  %body
    .title
      %h1 Portland JavaScript Admirers

    .section
      %p 
        We meet monthly to discuss topics on JavaScript and ECMAscript ranging
        from client-side web frameworks, to functional and prototypal programming
        theory. Meetings take place on the last Wednesday of every month from 7-9pm at
        %a{ :href => "http://calagator.org/venues/202389907" } Cubespace
        \.

      %p
        Our next meeting will be on February 25th. Topics are still up in the air; so
        please send a message to 
        %a{ :href => "mailto:pdxjs@googlegroups.com" } pdxjs@googlegroups.com
        if you would like to give a presentation, or if you have a suggestion for a topic.

      %p
        Feel free to join our mailing list at 
        %a{ :href => "http://groups.google.com/group/pdxjs" } http://groups.google.com/group/pdxjs
        if you too are a JavaScript admirer.

    .section
      %h2 Calendar
      %a{ :rel => "calendar", :type => "application/json", :href => "http://jsonp.pdxjs.com/?src=http%3A%2F%2Fcalagator.org%2Fevents%2Fsearch.json%3Ftag%3Dpdxjs" }
	
    .section
      %h2 Topics
      #topics

    .section
      %h2 Reporting from the Closures

      %h3.title PDX.js January Meeting Recap
      %p
        The inaugural meeting of the Portland JavaScript Admirers was a big
        success. We started off the evening with a round of introductions.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3170513&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3170513&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        After that we listened to several talks on the fine language that is
        JavaScript. I pulled out my copy of JavaScript: The Good Parts by
        Douglas Crockford and went over some of the tips from the book on how
        to write great JavaScript code. I focused on how and why to avoid
        global variables - which can sneak up on your JavaScript code if you
        are not careful. 
        
      %p
        For example, you may know that variable declaration in
        JavaScript is optional. But did you know that variables that are not
        declared become global?

      %p
        Another tricky case is the 'this' keyword, which is used in method
        definitions to access attributes of the object that the method is
        attached to. But 'this' is actually re-assigned every time the method
        is invoked. So if the method is invoked as a function instead of as a
        method, i.e.
      %code
        %pre var f = object.method; f();
      %p
        instead of
      %code
        %pre object.method();
      %p
        then 'this' is assigned to the global object for the execution of 'f'.
        So any attributes set on 'this' then become global variables, and any
        attributes read from 'this' are read from the global namespace instead
        of from 'object'.

      %p
        The code examples that I am pointing at in the video are online at
        %a{ :href => "http://gist.github.com/64478" } http://gist.github.com/64478
        \.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3139648&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3139648&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        Scott Becker told us all about the features of 
        %a{ :href => "http://www.sproutcore.com/" } SproutCore
        , which is an
        MVC framework for browser-side applications. Among other things,
        SproutCore allows you to set up models for your data, which can act as
        an intermediary to transfer data to and from a server, or that can
        store data locally using something like Google Gears. Changes made in
        the model data automatically update data in your views, and vice versa,
        through the use of Key-Value Coding. Instead of directly accessing
        attribute values, you use object.get(key) and object.set(key, value).
        This allows SproutCore to do all kinds of magical stuff for you.

      %p
        Views in SproutCore are things like forms and form elements, buttons,
        file selectors, and content areas. Instead of using the browser's form
        elements and buttons, SproutCore renders these as images to achieve a
        very slick-looking interface that is consistent across all browsers.

      %p
        Using Key-Value Coding with views, you can do stuff like get input from
        your user via a form, and display a live preview of the content he
        enters that is updated in real time, with very little work on your part.

      %p
        The slides from Scott's talk are online at
        %a{ :href => "http://www.slideshare.net/joydivider/sproutcore-a-next-gen-javascript-framework" }
          http://www.slideshare.net/joydivider/sproutcore-a-next-gen-javascript-framework
        \.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3188440&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3188440&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        I went over the new features in 
        %a{ :href => "http://docs.jquery.com/Release:jQuery_1.3" }jQuery 1.3
        \. Many speed improvements
        have been made in this release. For example, the selector engine is 49%
        faster. And HTML injection into the document is a blazing 6 times
        faster. The new, faster selector engine has been broken out into its
        own project called 
        %a{ :href => "http://sizzlejs.com/" }Sizzle
        \.
        
      %p
        This release also includes a complete rewrite of the event system. In
        addition to the 'bind' method for binding event handlers, jQuery 1.3
        supports the most excellent 'live' method. Using 'live', your event
        handler will be bound to all elements on the page that match a given
        selector, and any elements that appear in the future that match the
        same selector.

      %p
        jQuery events are now a self-contained system layered on top of native
        events. And the whole thing is compliant with W3C protocols for event
        handling.

      %p
        I also gave an introduction to jQuery in general for those who are not
        familiar with it. And we had a lively group discussion on why people
        might prefer jQuery over alternative libraries, like Prototype.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3197144&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3197144&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        Finally, J. Chris Anderson graciously jumped in to give us an
        introduction to
        %a{ :href => "http://couchdb.apache.org/" } CouchDB
        , a document-oriented database. CouchDB stores all of its data as JSON.
        There is no schema, and there are no tables. Queries are performed
        using the MapReduce pattern and can be written as stored JavaScript
        procedures.

      %p
        Because it is schema-less, CouchDB is not a great choice when you need
        a lot of relational features, like joins. But in cases where you have
        been frustrated by SQL, CouchDB can be a great choice. It excels at
        serving up very large datasets with a high number of concurrent
        queries.

      %p
        J. Chris is a CouchDB developer, and is one of the authors of CouchDB:
        Rough Cuts Version. We will hopefully be seeing another talk from him
        on using CouchDB to create pure-JavaScript applications.

      <object width="400" height="302"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=3197436&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=3197436&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></embed></object>

      %p
        At the end of the evening we retired to the Green Dragon for drinks. (Video suppressed.)

      %p
        If you are having any trouble with audio syncing in the flash player, I
        suggest downloading the MP4s directly. Click on the title in any of the
        videos to go to its page on Vimeo. There you can find the file download
        link in the lower-right area.


      %a{ :href => "http://mybizmo.blogspot.com/2009/01/admiring-javascript.html" }
        %h3.title Admiring Javascript
      %p
        I'm at the first Portland JavaScript Admirers, well attended, geeks
        cheering for CubeSpace. We've got lots of independent contractors, including my
        Hewlett-Packard friend from Pythoneers (how I'm logged in, wearing the fleece),
        whom I also invited to our Ruby meetings, first Tuesdays.
        %a{ :href => "http://mybizmo.blogspot.com/2009/01/admiring-javascript.html" }
          read more

    .section
      %h2 Resources

      %p
        Join the mailing list at
        %a{ :href => "http://groups.google.com/group/pdxjs" } http://groups.google.com/group/pdxjs
        \.

      %p 
        Interested in CouchDB? Set up your own database on our public server at
        %a{ :href => "http://pdxjs.com:5984/_utils" } http://pdxjs.com:5984/_utils
        \. We only ask that you are respectful of other people's data.

      %p
        Check your code against jslint online at
        %a{ :href => "http://www.jslint.com/" } http://www.jslint.com/
        to catch potential errors early. Or download the jslint plugin for Vim from
        %a{ :href => "http://github.com/hallettj/jslint.vim/" } http://github.com/hallettj/jslint.vim/
        \.

      %p
        Find out about other groups and events in Portland on
        %a{ :href => "http://calagator.org/" } Calagator
        \.

    .footer
      %p
        %span{ "xmlns:dc".to_sym => "http://purl.org/dc/elements/1.1/", :href => "http://purl.org/dc/dcmitype/InteractiveResource", :property => "dc:title", :rel => "dc:type" } pdxjs.com
        by 
        %a{ "xmlns:cc".to_sym => "http://creativecommons.org/ns#", :href => "http://pdxjs.com/", :property => "cc:attributionName", :rel => "cc:attributionURL" } Portland JavaScript Admirers contributers
        is licensed under a
        %a{ :rel => "license", :href => "http://creativecommons.org/licenses/by-sa/3.0/us/" }
          Creative Commons Attribution-Share Alike 3.0 United States License
        \.

      %p
        The source for this website is hosted on Github at
        %a{ :href => "http://github.com/hallettj/pdxjs.com/" } http://github.com/hallettj/pdxjs.com/
        \. To make contributions, fork the code and send a pull request.

    %script{ :type => "text/javascript", :src => "http://google.com/jsapi" }
    %script
      google.load("jquery", "1.3.1");
    %script{ :type => "text/javascript", :src => "/js/strftime.js" }
    %script{ :type => "text/javascript", :src => "/js/calagator_widget.js" }
